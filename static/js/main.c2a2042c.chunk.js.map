{"version":3,"sources":["components/Counter/Buttons(не-нужны)/Buttons.module.css","components/Counter/Tablo/Tablo.tsx","components/Counter/Button/Button.tsx","Reducers/counterReducer.ts","App.tsx","reportWebVitals.ts","Reducers/store.ts","index.tsx","components/CounterSettings/CounterSettings.module.css","components/Counter/Tablo/Tablo.module.css","components/Counter/Button/Button.module.css"],"names":["module","exports","Tablo","props","className","classes","tabloBlock","inc","maxValue","counterMessage","startValue","incorrectMessageStyle","countStyle","Button","title","callback","disabled","buttonsStyle","onClick","buttonStyle","initialState","setDisabled","resetDisabled","incDisabled","setCounterMessageAC","message","type","App","dispatch","useDispatch","useSelector","state","counter","useEffect","startValueAsString","localStorage","getItem","maxValueAsString","counterValueAsString","JSON","parse","counterValue","pressSet","getState","currentStartValue","currentMaxValue","setItem","stringify","setDis","incDis","resDis","incDis2","resDis2","inputErrorStyle","CIclasses","inputError","input","settingsInfoAndButtonBlock","counterSettings","inputBlock","valueInfo","value","onChange","e","newMaxValue","setMaxValueAC","Number","currentTarget","onKeyPress","newStartValue","setStartValueAC","buttonBlock","currentCounterValue","counterValueAfterPressReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2a2042c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsStyle\":\"Buttons_buttonsStyle__1hUTh\",\"buttonStyle\":\"Buttons_buttonStyle__hvrot\"};","import classes from './Tablo.module.css'\n\ntype PropsType = {\n    inc: number | string\n    startValue: number\n    maxValue: number\n    counterMessage: 'Press set' | 'Incorrect value' | null\n}\n\nexport function Tablo(props: PropsType) {\n\n    const changeClass2 = () => {\n        if (props.inc === props.maxValue) {\n            return classes.incorrectMessageStyle\n        } else if (props.counterMessage === 'Incorrect value' || props.startValue < 0) {\n            return classes.incorrectMessageStyle\n        } else return classes.countStyle\n    }\n\n    return (\n        <div className={classes.tabloBlock}>\n            <div className={changeClass2()}>\n                {props.counterMessage ? props.counterMessage : props.inc}\n            </div>\n        </div>\n    )\n}","import classes from './Button.module.css'\n\ntype PropsType = {\n    title: string\n    callback: () => void\n    disabled: boolean\n}\n\nexport function Button({title, callback, disabled, ...props}: PropsType) {\n\n    return (\n        <div className={classes.buttonsStyle}>\n            <button onClick={callback}\n                    disabled={disabled}\n                    className={classes.buttonStyle}>\n                {title}\n            </button>\n        </div>\n    )\n}","import {counterMessagesType} from \"../App\";\nimport {Dispatch} from \"react\";\nimport {RootReducerType} from \"./store\";\n\nexport type initialStateType = {\n    startValue: number\n    maxValue: number\n    inc: number\n    setDisabled: boolean\n    resetDisabled: boolean\n    incDisabled: boolean\n    counterMessage: counterMessagesType\n}\nconst initialState: initialStateType = {\n    startValue: 0,\n    maxValue: 5,\n    inc: 0,\n    setDisabled: false,\n    resetDisabled: true,\n    incDisabled: true,\n    counterMessage: 'Press set'\n}\n\nexport const counterReducer = (state = initialState, action: ActionTypes): initialStateType => {\n    switch (action.type) {\n        case 'PRESS-INC': {\n            if (state.inc < state.maxValue) {\n                return {\n                    ...state,\n                    inc: state.inc + 1\n                }\n            } else return state\n        }\n        case 'PRESS-RESET': {\n            return {\n                ...state,\n                inc: state.startValue\n            }\n        }\n        case 'SET-MAX-VALUE': {\n            return {\n                ...state,\n                maxValue: action.newMaxValue\n            }\n        }\n        case 'SET-START-VALUE': {\n            return {\n                ...state,\n                startValue: action.newStartValue\n            }\n        }\n        case 'BEFORE-PRESS-SET': {\n            return {\n                ...state,\n                setDisabled: false,\n                incDisabled: true,\n                resetDisabled: true,\n                counterMessage: null\n            }\n        }\n        case 'AFTER-PRESS-SET': {\n            return {\n                ...state,\n                setDisabled: true,\n                incDisabled: false,\n                resetDisabled: false,\n                counterMessage: null\n            }\n        }\n        case 'DISABLE-ALL-BUTTONS': {\n            return {\n                ...state,\n                setDisabled: true,\n                incDisabled: true,\n                resetDisabled: true,\n            }\n        }\n        case 'SET-COUNTER-MESSAGE': {\n            return {\n                ...state,\n                counterMessage: action.message\n            }\n        }\n        case 'SET-VALUES-FROM-LOCAL-STORAGE': {\n            return {\n                ...state,\n                startValue: action.startValue,\n                maxValue: action.maxValue,\n                inc: action.counterValue\n            }\n        }\n        default:\n            return state\n    }\n};\ntype ActionTypes =\n    incCounterACType\n    | resetIncACType\n    | setMaxValueACType\n    | setStartValueACType\n    | afterPressSetACType\n    | setCounterMessageACType\n    | beforePressSetACType\n    | disableAllButtonsACType\n    | setValuesFromLocalStorageACType\n\nexport type incCounterACType = ReturnType<typeof incCounterAC>\nexport const incCounterAC = () => {\n    return {\n        type: 'PRESS-INC'\n    } as const\n}\n\nexport type resetIncACType = ReturnType<typeof resetIncAC>\nexport const resetIncAC = () => {\n    return {\n        type: 'PRESS-RESET'\n    } as const\n}\n\nexport type setMaxValueACType = ReturnType<typeof setMaxValueAC>\nexport const setMaxValueAC = (e: number) => {\n    return {\n        type: 'SET-MAX-VALUE',\n        newMaxValue: e\n    } as const\n}\n\nexport type setStartValueACType = ReturnType<typeof setStartValueAC>\nexport const setStartValueAC = (e: number) => {\n    return {\n        type: 'SET-START-VALUE',\n        newStartValue: e\n    } as const\n}\n\nexport type afterPressSetACType = ReturnType<typeof afterPressSetAC>\nexport const afterPressSetAC = () => {\n    return {\n        type: 'AFTER-PRESS-SET'\n    } as const\n}\n\nexport type beforePressSetACType = ReturnType<typeof beforePressSetAC>\nexport const beforePressSetAC = () => {\n    return {\n        type: 'BEFORE-PRESS-SET'\n    } as const\n}\n\nexport type setCounterMessageACType = ReturnType<typeof setCounterMessageAC>\nexport const setCounterMessageAC = (message: counterMessagesType) => {\n    return {\n        type: 'SET-COUNTER-MESSAGE',\n        message\n    } as const\n}\n\nexport type disableAllButtonsACType = ReturnType<typeof disableAllButtonsAC>\nexport const disableAllButtonsAC = () => {\n    return {\n        type: 'DISABLE-ALL-BUTTONS'\n    } as const\n}\n\nexport type setValuesFromLocalStorageACType = ReturnType<typeof setValuesFromLocalStorageAC>\nexport const setValuesFromLocalStorageAC = (startValue: number, maxValue: number, counterValue: number) => {\n    return {\n        type: 'SET-VALUES-FROM-LOCAL-STORAGE',\n        startValue,\n        maxValue,\n        counterValue\n    } as const\n}\n\n\nexport const setStartValueAndMaxValueTC = () => (dispatch: Dispatch<any>, getState: () => RootReducerType) => {\n    let currentStartValue = getState().counter.startValue\n    let currentMaxValue = getState().counter.maxValue\n    localStorage.setItem('startValue', JSON.stringify(currentStartValue))\n    localStorage.setItem('maxValue', JSON.stringify(currentMaxValue))\n    dispatch(resetIncAC())\n    dispatch(afterPressSetAC())\n}\n\nexport const counterValueTC = () => (dispatch: Dispatch<any>, getState: () => RootReducerType) => {\n    let currentCounterValue = getState().counter.inc\n    localStorage.setItem('counterValue', JSON.stringify(currentCounterValue + 1))\n    dispatch(incCounterAC())\n}\n\nexport const pressResetTC = () => (dispatch: Dispatch<any>, getState: () => RootReducerType) => {\n    let counterValueAfterPressReset = getState().counter.startValue\n    localStorage.setItem('counterValue', JSON.stringify(counterValueAfterPressReset))\n    dispatch(resetIncAC())\n}\n\nexport const setStartValueAndMaxValueFromLocalStorageTC = () => (dispatch: Dispatch<any>) => {\n    let startValueAsString = localStorage.getItem('startValue')\n    let maxValueAsString = localStorage.getItem('maxValue')\n    let counterValueAsString = localStorage.getItem('counterValue')\n    if (startValueAsString && maxValueAsString && counterValueAsString) {\n        let newStartValueAsString = JSON.parse(startValueAsString)\n        let newMaxValueAsString = JSON.parse(maxValueAsString)\n        let newCounterValueAsString = JSON.parse(counterValueAsString)\n        dispatch(setValuesFromLocalStorageAC(newStartValueAsString, newMaxValueAsString, newCounterValueAsString))\n    }\n}\n\n\n\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Tablo} from \"./components/Counter/Tablo/Tablo\";\nimport {Button} from \"./components/Counter/Button/Button\";\nimport classes from \"./components/Counter/Buttons(не-нужны)/Buttons.module.css\";\nimport CIclasses from './components/CounterSettings/CounterSettings.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"./Reducers/store\";\nimport {\n    beforePressSetAC,\n    counterValueTC,\n    disableAllButtonsAC,\n    pressResetTC,\n    setCounterMessageAC,\n    setMaxValueAC,\n    setStartValueAC,\n    setStartValueAndMaxValueFromLocalStorageTC,\n    setStartValueAndMaxValueTC\n} from \"./Reducers/counterReducer\";\n\nexport type counterMessagesType = 'Press set' | 'Incorrect value' | null\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    let inc = useSelector<RootReducerType, number>(state => state.counter.inc)\n    let startValue = useSelector<RootReducerType, number>(state => state.counter.startValue)\n    let maxValue = useSelector<RootReducerType, number>(state => state.counter.maxValue)\n\n    let counterMessage = useSelector<RootReducerType, counterMessagesType>(state => state.counter.counterMessage)\n\n    useEffect(() => {\n        dispatch(setStartValueAndMaxValueFromLocalStorageTC())\n    }, [ ])\n\n    const pressSet = () => { //при клике на кнопку set происходит это:\n        dispatch(setStartValueAndMaxValueTC())\n    }\n    //\n    const pressInc = () => { //при клике на кнопку inc происходит это:\n        dispatch(counterValueTC())\n    }\n\n    const pressReset = () => { //при клике на кнопку reset происходит это:\n        dispatch(pressResetTC())\n    }\n\n    const currentValueOfMaxInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        //функция вызывается если что-то меняем в инпуте max value\n        dispatch(beforePressSetAC())\n        dispatch(setMaxValueAC(Number(e.currentTarget.value)))\n        if (+e.currentTarget.value <= startValue || +e.currentTarget.value <= 0) {\n            dispatch(setCounterMessageAC('Incorrect value'))\n            dispatch(disableAllButtonsAC())\n        }\n        if (+e.currentTarget.value > startValue) {\n            dispatch(setCounterMessageAC('Press set'))\n        }\n    }\n    const currentValueOfStartInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        //функция вызывается если что-то меняем в инпуте start value\n        dispatch(beforePressSetAC())\n        dispatch(setStartValueAC(+e.currentTarget.value))\n        dispatch(setCounterMessageAC('Press set'))\n        if (+e.currentTarget.value >= maxValue) {\n            dispatch(setCounterMessageAC('Incorrect value'))\n            dispatch(disableAllButtonsAC())\n        }\n        if (+e.currentTarget.value < maxValue) {\n            dispatch(setCounterMessageAC('Press set'))\n        }\n        if (+e.currentTarget.value < 0) {\n            dispatch(setCounterMessageAC('Incorrect value'))\n            dispatch(disableAllButtonsAC())\n        }\n    }\n\n    let setDis = useSelector<RootReducerType, boolean>(state => state.counter.setDisabled)\n    let incDis = useSelector<RootReducerType, boolean>(state => state.counter.incDisabled)\n    let resDis = useSelector<RootReducerType, boolean>(state => state.counter.resetDisabled)\n\n    const incDis2 = inc === maxValue\n    const resDis2 = inc === startValue\n\n    const inputErrorStyle = maxValue <= startValue || maxValue <= 0 || startValue < 0 ? CIclasses.inputError : CIclasses.input\n\n    return (\n        <div>\n            <div className={CIclasses.settingsInfoAndButtonBlock}>\n                <div className={CIclasses.counterSettings}>\n                    <div className={CIclasses.inputBlock}>\n                        <div className={CIclasses.valueInfo}>\n                            max value\n                            <span>\n                        <input className={inputErrorStyle}\n                               type='number'\n                               value={maxValue}\n                               onChange={currentValueOfMaxInput}\n                               onKeyPress={pressSet}\n                        />\n                        </span>\n                        </div>\n                        <div className={CIclasses.valueInfo}>\n                            start value\n                            <span>\n                        <input className={inputErrorStyle}\n                               type='number'\n                               value={startValue}\n                               onChange={currentValueOfStartInput}\n                               onKeyPress={pressSet}\n                        />\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className={CIclasses.buttonBlock}>\n                    <Button title={'set'}\n                            callback={pressSet}\n                            disabled={setDis}\n                    />\n                </div>\n            </div>\n            <div className=\"Counter\">\n                <Tablo inc={inc}\n                       maxValue={maxValue}\n                       counterMessage={counterMessage}\n                       startValue={startValue}\n                />\n                <div className={classes.buttonsStyle}>\n                    <Button title={'inc'}\n                            callback={pressInc}\n                            disabled={incDis || incDis2}\n                    />\n                    <Button title={'reset'}\n                            callback={pressReset}\n                            disabled={resDis || resDis2}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n// //класс для инпута ошибки или нет\n// const conditionsOfSetDisable = setDisabled || startValue < 0 || maxValue <= 0 || startValue >= maxValue\n\n// const disabledInc = incDisabled || inc === maxValue //условие дизейбла кнопки inc\n// const disabledReset = resetDisabled //условие дизейбла кнопки reset\n// const disabledSet = conditionsOfSetDisable //условие дизейбла кнопки set","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {counterReducer} from \"./counterReducer\";\nimport thunk from \"redux-thunk\";\n\nlet rootReducer = combineReducers({\n    counter: counterReducer\n})\nexport type RootReducerType = ReturnType<typeof rootReducer>\ntype AppStoreType = typeof store\n\nexport let store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Reducers/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsInfoAndButtonBlock\":\"CounterSettings_settingsInfoAndButtonBlock__mWkGi\",\"counterSettings\":\"CounterSettings_counterSettings__7IXex\",\"inputBlock\":\"CounterSettings_inputBlock__3Ppdp\",\"valueInfo\":\"CounterSettings_valueInfo__3-2i9\",\"input\":\"CounterSettings_input__2UrqR\",\"buttonBlock\":\"CounterSettings_buttonBlock__2WwgD\",\"inputError\":\"CounterSettings_inputError__1oVTZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countStyle\":\"Tablo_countStyle__3_sPF\",\"tabloBlock\":\"Tablo_tabloBlock__1zG0j\",\"incorrectMessageStyle\":\"Tablo_incorrectMessageStyle__1Uv6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"Button_buttonStyle__1hg3C\"};"],"sourceRoot":""}