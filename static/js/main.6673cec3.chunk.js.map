{"version":3,"sources":["components/CounterSettings/CounterSettings.module.css","components/Counter/Tablo/Tablo.module.css","components/Counter/Button/Button.module.css","components/Counter/Buttons(не-нужны)/Buttons.module.css","components/Counter/Tablo/Tablo.tsx","components/Counter/Button/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Tablo","props","className","classes","tabloBlock","inc","maxValue","maxCountStyle","counterMessage","startValue","incorrectMessageStyle","countStyle","Button","title","callback","disabled","buttonsStyle","onClick","buttonStyle","App","useState","setStartValue","setMaxValue","setDisabled","setSetDisabled","resetDisabled","setResetDisabled","incDisabled","setIncDisabled","setInc","setCounterMessage","inputErrorStyle","CIclasses","inputError","input","disabledInc","disabledReset","disabledSet","settingsInfoAndButtonBlock","counterSettings","inputBlock","valueInfo","type","value","onChange","e","currentTarget","console","log","buttonBlock","newInc","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6673cec3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsInfoAndButtonBlock\":\"CounterSettings_settingsInfoAndButtonBlock__mWkGi\",\"counterSettings\":\"CounterSettings_counterSettings__7IXex\",\"inputBlock\":\"CounterSettings_inputBlock__3Ppdp\",\"valueInfo\":\"CounterSettings_valueInfo__3-2i9\",\"input\":\"CounterSettings_input__2UrqR\",\"buttonBlock\":\"CounterSettings_buttonBlock__2WwgD\",\"inputError\":\"CounterSettings_inputError__1oVTZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"maxCountStyle\":\"Tablo_maxCountStyle__2pfCr\",\"countStyle\":\"Tablo_countStyle__3_sPF\",\"tabloBlock\":\"Tablo_tabloBlock__1zG0j\",\"incorrectMessageStyle\":\"Tablo_incorrectMessageStyle__1Uv6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"Button_buttonStyle__1hg3C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsStyle\":\"Buttons_buttonsStyle__1hUTh\",\"buttonStyle\":\"Buttons_buttonStyle__hvrot\"};","import classes from './Tablo.module.css'\n\ntype PropsType = {\n    inc: number | string\n    startValue: number\n    maxValue: number\n    counterMessage: 'Press set' | 'Incorrect value' | null\n}\n\nexport function Tablo(props: PropsType) {\n\n    const changeClass2 = () => {\n        if (props.inc === props.maxValue) {\n            return classes.maxCountStyle\n        } else if (props.counterMessage === 'Incorrect value' || props.startValue < 0) {\n            return classes.incorrectMessageStyle\n        } else return classes.countStyle\n    }\n\n    return (\n        <div className={classes.tabloBlock}>\n            <div className={changeClass2()}>\n                {props.counterMessage ? props.counterMessage : props.inc}\n            </div>\n        </div>\n    )\n}","import classes from './Button.module.css'\n\ntype PropsType = {\n    title: string\n    callback: () => void\n    disabled: boolean\n}\n\nexport function Button({title, callback, disabled, ...props}: PropsType) {\n\n    return (\n        <div className={classes.buttonsStyle}>\n            <button onClick={callback}\n                    disabled={disabled}\n                    className={classes.buttonStyle}>\n                {title}\n            </button>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Tablo} from \"./components/Counter/Tablo/Tablo\";\nimport {Button} from \"./components/Counter/Button/Button\";\nimport classes from \"./components/Counter/Buttons(не-нужны)/Buttons.module.css\";\nimport CIclasses from './components/CounterSettings/CounterSettings.module.css'\n\nfunction App() {\n\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [setDisabled, setSetDisabled] = useState(false)\n    const [resetDisabled, setResetDisabled] = useState(false)\n    const [incDisabled, setIncDisabled] = useState(false)\n    const [inc, setInc] = useState<number | string>(startValue)\n    const [counterMessage, setCounterMessage] = useState<'Press set' | 'Incorrect value' | null>(null)\n\n    const changeSet = () => { //при клике на кнопку set происходит это:\n        setCounterMessage(null)\n        setInc(startValue)\n        setSetDisabled(true)\n        setIncDisabled(false)\n        setResetDisabled(false)\n    }\n\n    const changeInc = () => { //при клике на кнопку inc происходит это:\n        if (inc < maxValue) {\n            let newInc = Number(inc)\n            setInc(++newInc) // inc = inc + 1\n        }\n    }\n\n    const changeReset = () => { //при клике на кнопку reset происходит это:\n        setInc(startValue)\n    }\n\n    const currentValueOfMaxInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        //функция вызывается если что-то меняем в инпуте max value\n        setSetDisabled(false)\n        setIncDisabled(true)\n        setResetDisabled(true)\n        setMaxValue(+e.currentTarget.value)\n        if (+e.currentTarget.value <= startValue || +e.currentTarget.value <= 0) {\n            setCounterMessage('Incorrect value')\n        }\n        if (+e.currentTarget.value > startValue) {\n            setCounterMessage('Press set')\n        }\n    }\n    const currentValueOfStartInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        //функция вызывается если что-то меняем в инпуте start value\n        console.log(+e.currentTarget.value)\n        setSetDisabled(false)\n        setIncDisabled(true)\n        setResetDisabled(true)\n        setStartValue(+e.currentTarget.value)\n        setCounterMessage('Press set')\n        if (+e.currentTarget.value >= maxValue) {\n            setCounterMessage('Incorrect value')\n        }\n        if (+e.currentTarget.value < maxValue) {\n            setCounterMessage('Press set')\n        }\n        if (+e.currentTarget.value < 0) {\n            setCounterMessage('Incorrect value')\n        }\n    }\n\n    const inputErrorStyle = maxValue <= startValue || maxValue <= 0 || startValue < 0 ? CIclasses.inputError : CIclasses.input\n    //класс для инпута ошибки или нет\n    const conditionsOfSetDisable = startValue === 0 && maxValue === 5 || setDisabled || startValue < 0 || maxValue <= 0 || startValue >= maxValue\n\n    const disabledInc = incDisabled || inc === maxValue //условие дизейбла кнопки inc\n    const disabledReset = resetDisabled //условие дизейбла кнопки reset\n    const disabledSet = conditionsOfSetDisable //условие дизейбла кнопки set\n\n    return (\n        <div>\n            <div className={CIclasses.settingsInfoAndButtonBlock}>\n                <div className={CIclasses.counterSettings}>\n                    <div className={CIclasses.inputBlock}>\n                        <div className={CIclasses.valueInfo}>\n                            max value\n                            <span>\n                        <input className={inputErrorStyle}\n                               type='number'\n                               value={maxValue}\n                               onChange={currentValueOfMaxInput}\n                        />\n                        </span>\n                        </div>\n                        <div className={CIclasses.valueInfo}>\n                            start value\n                            <span>\n                        <input className={inputErrorStyle}\n                               type='number'\n                               value={startValue}\n                               onChange={currentValueOfStartInput}\n                        />\n                            </span>\n                        </div>\n                    </div>\n                    {/*<Input title={'max value'}*/}\n                    {/*    // changeNewValue={changeNewMaxValue}*/}\n                    {/*       newValue={maxValue}*/}\n                    {/*       setNewValue={setMaxValue}*/}\n                    {/*    // changeInputStyle={changeInputStyle}*/}\n                    {/*       errorValue={error}*/}\n                    {/*       setSetDisabled={setSetDisabled}*/}\n                    {/*       setIncDisabled={setIncDisabled}*/}\n                    {/*       setResetDisabled={setResetDisabled}*/}\n                    {/*       setIncValue={setInc}*/}\n                    {/*       errorMessage={errorMessage}*/}\n                    {/*/>*/}\n                    {/*<Input title={'start value'}*/}\n                    {/*    // changeNewValue={changeNewStartValue}*/}\n                    {/*       newValue={startValue}*/}\n                    {/*       setNewValue={setStartValue}*/}\n                    {/*    // changeInputStyle={changeInputStyle}*/}\n                    {/*       errorValue={error}*/}\n                    {/*       setSetDisabled={setSetDisabled}*/}\n                    {/*       setIncDisabled={setIncDisabled}*/}\n                    {/*       setResetDisabled={setResetDisabled}*/}\n                    {/*       setIncValue={setInc}*/}\n                    {/*       errorMessage={errorMessage}*/}\n                    {/*/>*/}\n                </div>\n                <div className={CIclasses.buttonBlock}>\n                    <Button title={'set'}\n                            callback={changeSet}\n                            disabled={disabledSet}/>\n                </div>\n            </div>\n            <div className=\"Counter\">\n                <Tablo inc={inc}\n                       maxValue={maxValue}\n                       counterMessage={counterMessage}\n                       startValue={startValue}\n                />\n                <div className={classes.buttonsStyle}>\n                    <Button title={'inc'}\n                            callback={changeInc}\n                            disabled={disabledInc}\n                    />\n                    <Button title={'reset'}\n                            callback={changeReset}\n                            disabled={disabledReset}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}